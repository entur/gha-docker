name: Entur/Docker/CI

on:
  pull_request:

jobs:
  # test-lint-ok:
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     dockerfile: fixture/Dockerfile.good
  #     timeout_minutes: 1

  # test-lint-ignore-ok:
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     dockerfile: fixture/Dockerfile.bad
  #     ignore: DL3000

  # assert-lint-fail-ok:
  #   runs-on: ubuntu-24.04
  #   env:
  #     GHA_REF: ""
  #     HADOLINT_RESULTS: ""
  #   steps:
  #     - name: Set variables
  #       id: set-vars
  #       shell: bash
  #       run: |
  #         if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
  #            GHA_REF=${GITHUB_HEAD_REF}
  #         else
  #            GHA_REF=${GITHUB_REF_NAME}
  #         fi
  #         echo "GHA_REF=${GHA_REF}" >> $GITHUB_ENV

  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.GHA_REF }}
  #         fetch-depth: 0
  #     - uses: hadolint/hadolint-action@v3.1.0
  #       id: hadolint
  #       continue-on-error: true
  #       with:
  #         no-fail: true
  #         dockerfile: fixture/Dockerfile.bad
  #     - uses: nick-fields/assert-action@v2
  #       with:
  #         expected: "fixture/Dockerfile.bad:4 DL3000 error: Use absolute WORKDIR"
  #         actual: ${{ env.HADOLINT_RESULTS }}

  test-build-ok-with-build-args:
    permissions:
      contents: read
      id-token: write
    name: Docker Build with build args
    uses: ./.github/workflows/build.yml
    with:
      dockerfile: fixture/Dockerfile.buildargs
      image_name: custom_image_name_with_build_args
    secrets:
      build_secrets: |
        ${{ secrets.MY_SECRET }}
        ${{ secrets.MY_SECRET2 }}

  assert-build-ok-with-build-args:
    name: Assert build with build args
    runs-on: ubuntu-24.04
    needs: test-build-ok-with-build-args
    env:
      GHA_BUILD_ARGS: ""
    steps:
      - name: Download docker image from the artifact storage
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.test-build-ok-with-build-args.outputs.image_artifact }}
          path: /tmp
      - name: Load and run docker image
        env:
          DOCKER_IMAGE: ${{ needs.test-build-ok-with-build-args.outputs.image_artifact }}
        shell: bash
        run: |
          docker load --input /tmp/${DOCKER_IMAGE}.tar
          echo "GHA_BUILD_ARGS=$(docker run --rm ${DOCKER_IMAGE}:${GITHUB_SHA})" >> $GITHUB_ENV
      - name: Verify build args
        shell: bash
        run: |
          set -o pipefail
          echo "${GHA_BUILD_ARGS}" | grep -q "build args"

  # test-build-prepare-artifact:
  #   needs: test-lint-ok
  #   runs-on: ubuntu-24.04
  #   env:
  #     GHA_REF: ""
  #   steps:
  #     - name: Set variables
  #       id: set-vars
  #       shell: bash
  #       run: |
  #         if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
  #            GHA_REF=${GITHUB_HEAD_REF}
  #         else
  #            GHA_REF=${GITHUB_REF_NAME}
  #         fi
  #         echo "GHA_REF=${GHA_REF}" >> $GITHUB_ENV
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.GHA_REF }}
  #         fetch-depth: 0
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: some_build_artifact
  #         path: fixture/artifact.txt
  #         retention-days: 1
  #         overwrite: true

  # test-build-ok-with-artifact:
  #   uses: ./.github/workflows/build.yml
  #   needs: test-build-prepare-artifact
  #   with:
  #     context: .
  #     dockerfile: fixture/Dockerfile.artifact
  #     build_artifact_name: some_build_artifact
  #     build_artifact_path: data

  # test-push-gcr-ok:
  #   needs: test-build-ok-with-artifact
  #   uses: ./.github/workflows/push.yml
  #   with:
  #     context: .
  #     dockerfile: fixture/Dockerfile.artifact

  # test-push-gcr-ok-with-tag:
  #   needs: test-push-gcr-ok
  #   uses: ./.github/workflows/push.yml
  #   with:
  #     context: .
  #     dockerfile: fixture/Dockerfile.artifact
  #     image_tag: ci-test-tag
  #     git_tag: false

  # assert-tag-gcr-outputs-ok:
  #   needs: test-push-gcr-ok-with-tag
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: nick-fields/assert-action@v2
  #       with:
  #         expected: "ci-test-tag"
  #         actual: ${{ needs.test-push-gcr-ok-with-tag.outputs.image_tag }}

  # test-build-ok-with-custom-image-name:
  #   uses: ./.github/workflows/build.yml
  #   with:
  #     dockerfile: fixture/Dockerfile.good
  #     image_name: custom_image_name

  # assert-build-ok-with-custom-image-name-outputs:
  #   runs-on: ubuntu-24.04
  #   needs: test-build-ok-with-custom-image-name
  #   steps:
  #     - uses: nick-fields/assert-action@v2
  #       with:
  #         expected: "custom_image_name:latest"
  #         actual: ${{ needs.test-build-ok-with-custom-image-name.outputs.image_tag }}
  #     - uses: nick-fields/assert-action@v2
  #       with:
  #         expected: "custom_image_name"
  #         actual: ${{ needs.test-build-ok-with-custom-image-name.outputs.image_artifact }}

  # test-push-acr-ok-with-tag:
  #   needs: test-build-ok-with-artifact
  #   uses: ./.github/workflows/push.yml
  #   with:
  #     cloud_provider: az
  #     context: .
  #     dockerfile: fixture/Dockerfile.artifact
  #     image_tag: ci-test-az-tag
  #     git_tag: false

  # assert-tag-acr-outputs-ok:
  #   runs-on: ubuntu-24.04
  #   needs: test-push-acr-ok-with-tag
  #   steps:
  #     - uses: nick-fields/assert-action@v2
  #       with:
  #         expected: "ci-test-az-tag"
  #         actual: ${{ needs.test-push-acr-ok-with-tag.outputs.image_tag }}

  # update-lint-doc:
  #   needs:
  #     [
  #       test-push-acr-ok-with-tag,
  #       assert-build-ok-with-custom-image-name-outputs,
  #     ]
  #   uses: entur/gha-meta/.github/workflows/auto-doc.yml@v1
  #   with:
  #     workflow_file: .github/workflows/lint.yml
  #     readme_file: README-lint.md

  # update-build-doc:
  #   needs:
  #     [
  #       test-push-acr-ok-with-tag,
  #       assert-build-ok-with-custom-image-name-outputs,
  #       update-lint-doc,
  #     ]
  #   uses: entur/gha-meta/.github/workflows/auto-doc.yml@v1
  #   with:
  #     workflow_file: .github/workflows/build.yml
  #     readme_file: README-build.md

  # update-push-doc:
  #   needs:
  #     [
  #       test-push-acr-ok-with-tag,
  #       assert-build-ok-with-custom-image-name-outputs,
  #       update-build-doc,
  #     ]
  #   uses: entur/gha-meta/.github/workflows/auto-doc.yml@v1
  #   with:
  #     workflow_file: .github/workflows/push.yml
  #     readme_file: README-push.md
